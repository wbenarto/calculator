{"version":3,"sources":["App.js","components/Output.js","components/Keys.js","serviceWorker.js","index.js"],"names":["App","state","result","buttonPressed","buttonName","calculate","reset","backspace","setState","console","log","slice","eval","e","className","this","Component","Output","props","Keys","target","name","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"64CAKMA,I,ktBAOJC,MAAQ,CACNC,OAAQ,I,MAEVC,cAAgB,SAACC,GACI,MAAfA,EACF,MAAKC,YACmB,MAAfD,EACT,MAAKE,QACmB,OAAfF,EACT,MAAKG,YAEL,MAAKC,SAAS,CACZN,OAAQ,MAAKD,MAAMC,OAASE,IAKhCK,QAAQC,IAAI,eAAiBN,GAC7BK,QAAQC,IAAI,WAAa,MAAKT,MAAMC,S,MAGtCI,MAAQ,WACN,MAAKE,SAAS,CACZN,OAAO,M,MAIXK,UAAY,WAEV,MAAKC,SAAS,CACZN,OAAQ,MAAKD,MAAMC,OAAOS,MAAM,GAAG,M,MAIvCN,UAAY,WACV,IACE,MAAKG,SAAS,CACZN,OAASU,KAAK,MAAKX,MAAMC,SAAW,KAEtC,MAAOW,GACP,MAAKL,SAAS,CACZN,OAAQ,Y,4VAMZ,OACE,kEAAKY,UAAU,OACb,kEAAKA,UAAU,aACb,2DAAC,kDAAD,CAAQZ,OAAQa,KAAKd,MAAMC,SAC3B,2DAAC,gDAAD,CAAMC,cAAeY,KAAKZ,sB,KA1DlBa,8CAiEHhB,2B,sHCpEMiB,E,iLAGb,OACI,yBAAKH,UAAU,UACX,2BAAIC,KAAKG,MAAMhB,a,GALKc,c,sHCAfG,E,2MAEjBhB,cAAgB,SAAAU,GACZJ,QAAQC,IAAI,EAAKQ,MAAMf,cAAcU,EAAEO,OAAOC,OAC9C,EAAKH,MAAMf,cAAcU,EAAEO,OAAOC,O,wEAIlC,OACI,yBAAKP,UAAU,WACX,4BAAQO,KAAK,IAAIC,QAASP,KAAKZ,eAA/B,KACA,4BAAQkB,KAAK,KAAKC,QAASP,KAAKZ,eAAhC,MACA,4BAAQkB,KAAK,IAAIC,QAASP,KAAKZ,eAA/B,KACA,4BAAQkB,KAAK,IAAIC,QAASP,KAAKZ,eAA/B,KACA,4BAAQkB,KAAK,IAAIC,QAASP,KAAKZ,eAA/B,KACA,4BAAQkB,KAAK,IAAIC,QAASP,KAAKZ,eAA/B,KACA,4BAAQkB,KAAK,IAAIC,QAASP,KAAKZ,eAA/B,KACA,4BAAQkB,KAAK,IAAIC,QAASP,KAAKZ,eAA/B,KACA,4BAAQkB,KAAK,IAAIC,QAASP,KAAKZ,eAA/B,KACA,4BAAQkB,KAAK,IAAIC,QAASP,KAAKZ,eAA/B,KACA,4BAAQkB,KAAK,IAAIC,QAASP,KAAKZ,eAA/B,KACA,4BAAQkB,KAAK,IAAIC,QAASP,KAAKZ,eAA/B,KACA,4BAAQkB,KAAK,IAAIC,QAASP,KAAKZ,eAA/B,KACA,4BAAQkB,KAAK,IAAIC,QAASP,KAAKZ,eAA/B,KACA,4BAAQkB,KAAK,IAAIC,QAASP,KAAKZ,eAA/B,KACA,4BAAQkB,KAAK,IAAIC,QAASP,KAAKZ,eAA/B,KACA,4BAAQkB,KAAK,IAAIC,QAASP,KAAKZ,eAA/B,U,GA1BkBa,c,gKCUdO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC7B,EAAA,EAAD,MAAS8B,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.856037c8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Output from \"./components/Output\";\nimport Keys from \"./components/Keys\";\nimport \"./App.css\";\n\nclass App extends Component {\n  // constructor(){\n  //   super();\n  //   this.state = {\n  //     result: ''\n  //   }\n  // }\n  state = {\n    result: \"\",\n  };\n  buttonPressed = (buttonName) => {\n    if (buttonName === \"=\") {\n      this.calculate();\n    } else if (buttonName === 'C') {\n      this.reset()\n    } else if (buttonName === 'CE') {\n      this.backspace();\n    } else\n      this.setState({\n        result: this.state.result + buttonName,\n      });\n\n     \n\n    console.log(\"ButtonName: \" + buttonName);\n    console.log(\"result: \" + this.state.result);\n  };\n\n  reset = () => {\n    this.setState({\n      result:''\n    })\n  }\n\n  backspace = () => {\n  \n    this.setState({\n      result: this.state.result.slice(0,-1)\n    })\n  }\n\n  calculate = () => {\n    try {\n      this.setState({\n        result: (eval(this.state.result) || \"\")\n      });\n    } catch (e) {\n      this.setState({\n        result: \"error\",\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"calc-body\">\n          <Output result={this.state.result} />\n          <Keys buttonPressed={this.buttonPressed} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react'\r\n\r\nexport default class Output extends Component {\r\n    render() {\r\n        \r\n        return (\r\n            <div className='result'>\r\n                <p>{this.props.result}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Keys extends Component {\r\n\r\n    buttonPressed = e => {\r\n        console.log(this.props.buttonPressed(e.target.name));\r\n        this.props.buttonPressed(e.target.name);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className='buttons'>\r\n                <button name='C' onClick={this.buttonPressed}>C</button>\r\n                <button name='CE' onClick={this.buttonPressed}>CE</button>\r\n                <button name='*' onClick={this.buttonPressed}>*</button>\r\n                <button name='/' onClick={this.buttonPressed}>/</button>\r\n                <button name='1' onClick={this.buttonPressed}>1</button>\r\n                <button name='2' onClick={this.buttonPressed}>2</button>\r\n                <button name='3' onClick={this.buttonPressed}>3</button>\r\n                <button name='-' onClick={this.buttonPressed}>-</button>\r\n                <button name='4' onClick={this.buttonPressed}>4</button>\r\n                <button name='5' onClick={this.buttonPressed}>5</button>\r\n                <button name='6' onClick={this.buttonPressed}>6</button>\r\n                <button name='+' onClick={this.buttonPressed}>+</button>\r\n                <button name='7' onClick={this.buttonPressed}>7</button>\r\n                <button name='8' onClick={this.buttonPressed}>8</button>\r\n                <button name='9' onClick={this.buttonPressed}>9</button>\r\n                <button name='=' onClick={this.buttonPressed}>=</button>\r\n                <button name='0' onClick={this.buttonPressed}>0</button>\r\n                \r\n                \r\n                \r\n                \r\n                \r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}